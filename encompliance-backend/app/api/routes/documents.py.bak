import os
import shutil
from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, status
from fastapi.responses import JSONResponse, FileResponse
from sqlalchemy.orm import Session
from typing import List
from datetime import datetime
from app.database import get_db
from app.models.document import Document
from app.models.user import User
from app.services.document_service import list_documents, get_document, get_file_mimetype, get_file_type
from app.auth.dependencies import get_current_user
from app.core.config import get_settings
import logging

router = APIRouter(tags=["documents"])
settings = get_settings()

# Define the document mapping
document_mapping = {
    "childcare-746-centers": "chapter-746-centers.pdf",
    "general-residential-operations": "chapter-748-gro.pdf"
}

# Add OPTIONS handler for CORS preflight requests
@router.options("/documents/list")
@router.options("/documents/upload")
@router.options("/documents/download/{document_id}")
@router.options("/documents/delete/{document_id}")
@router.options("/documents/view/{document_name}")
async def options_documents():
    """
    Handle OPTIONS requests for document endpoints.
    """
    headers = {
        "Access-Control-Allow-Origin": "http://localhost:5173",
        "Access-Control-Allow-Methods": "GET, POST, DELETE, OPTIONS",
        "Access-Control-Allow-Headers": "Authorization, Content-Type, x-token",
        "Access-Control-Max-Age": "600",
        "Access-Control-Allow-Credentials": "true",
    }
    return JSONResponse(content={}, headers=headers)

@router.post("/documents/upload", status_code=status.HTTP_201_CREATED)
async def upload_document(
    file: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """
    Upload a document file (PDF, DOCX, XLSX, etc.).
    """
    print(f"Document upload request received from user: {current_user.id}, username: {current_user.username}")
    print(f"File info - filename: {file.filename}, content_type: {file.content_type}")
    
    # Get file extension
    file_extension = os.path.splitext(file.filename)[1].lower()
    
    # Validate file type
    allowed_extensions = ['.pdf', '.docx', '.xlsx', '.xls', '.doc', '.txt']
    if file_extension not in allowed_extensions:
        print(f"Invalid file extension: {file_extension}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Only the following file types are allowed: {', '.join(allowed_extensions)}"
        )
    
    try:
        # Create storage directory if it doesn't exist
        os.makedirs(settings.PDF_STORAGE_PATH, exist_ok=True)
        
        # Generate a unique filename
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        unique_filename = f"{timestamp}_{file.filename}"
        file_path = os.path.join(settings.PDF_STORAGE_PATH, unique_filename)
        print(f"Saving file to: {file_path}")
        
        # Save the file
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        # Get file size
        file_size = os.path.getsize(file_path)
        print(f"File saved successfully. Size: {file_size} bytes")
        
        # Get file type
        file_type = get_file_type(file.filename)
        
        # Create document record in database
        print(f"Creating document record in database for user: {current_user.id}")
        document = Document(
            filename=file.filename,
            filepath=unique_filename,
            file_type=file_type,
            file_size=file_size,
            uploaded_by=current_user.id
        )
        db.add(document)
        db.commit()
        db.refresh(document)
        
        print(f"Document record created successfully. ID: {document.id}")
        
        return {
            "id": document.id,
            "filename": document.filename,
            "filepath": unique_filename,
            "file_type": document.file_type,
            "file_size": document.file_size,
            "uploaded_at": document.uploaded_at,
            "uploaded_by": document.uploaded_by
        }
    except Exception as e:
        # Enhanced error logging
        import traceback
        print(f"Error uploading document: {str(e)}")
        print(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to upload document: {str(e)}"
        )

@router.get("/documents/list")
async def get_documents(
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """
    List all documents for the current user.
    """
    try:
        # Enhanced logging
        print(f"Document list request for user ID: {current_user.id}, username: {current_user.username}")
        print(f"Auth info - is_active: {current_user.is_active}")
        
        # Get all documents (without filter) for debugging
        all_docs = db.query(Document).all()
        print(f"Total documents in database: {len(all_docs)}")
        for doc in all_docs:
            print(f"  Doc ID: {doc.id}, filename: {doc.filename}, uploaded_by: {doc.uploaded_by}, is_deleted: {doc.is_deleted}")
        
        # Get documents for this user
        documents = await list_documents(db, current_user.id)
        print(f"Found {len(documents)} documents for user {current_user.id}")
        for doc in documents:
            print(f"  User doc: {doc['id']}, {doc['filename']}")
            
        return {"documents": documents}
    except Exception as e:
        # Enhanced error logging
        import traceback
        print(f"Error listing documents: {str(e)}")
        print(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to list documents: {str(e)}"
        )

@router.get("/documents/download/{document_id}", response_class=FileResponse)
async def download_document(
    document_id: int,
    token: str = None,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """
    Get a document by ID, ensuring it belongs to the current user.
    """
    try:
        document = await get_document(document_id, db, current_user.id)
        
        if not document:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Document with ID {document_id} not found or you don't have permission to access it"
            )
        
        # Get the full path to the document file
        file_path = os.path.join(settings.PDF_STORAGE_PATH, document["filepath"])
        
        # Check if the file exists
        if not os.path.exists(file_path):
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Document file not found: {document['filename']}"
            )
        
        # Get the MIME type
        mime_type = get_file_mimetype(document["filename"])
        
        # Return the file with inline disposition (to display in browser)
        return FileResponse(
            path=file_path,
            filename=document["filename"],
            media_type=mime_type,
            content_disposition_type="inline"  # This makes it display in browser
        )
    except HTTPException:
        raise
    except Exception as e:
        # Log the error
        print(f"Error downloading document: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to download document: {str(e)}"
        )

@router.delete("/documents/delete/{document_id}")
async def delete_document(
    document_id: int,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """
    Delete a document by ID, ensuring it belongs to the current user.
    """
    try:
        # Get the document
        document = db.query(Document).filter(
            Document.id == document_id, 
            Document.uploaded_by == current_user.id,
            Document.is_deleted == False
        ).first()
        
        if not document:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Document with ID {document_id} not found or you don't have permission to delete it"
            )
        
        # Prevent deletion of Chapter 746 Centers PDF
        if document.filename.lower() == "chapter-746-centers.pdf" or "chapter-746" in document.filename.lower():
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="The Chapter 746 Centers PDF cannot be deleted as it contains essential compliance standards"
            )
        
        # Get the full path to the document file
        file_path = os.path.join(settings.PDF_STORAGE_PATH, document.filepath)
        
        # Check if the file exists and delete it
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"Deleted file: {file_path}")
        else:
            print(f"Warning: File not found for deletion: {file_path}")
        
        # Mark the document as deleted
        document.is_deleted = True
        document.deleted_at = datetime.now()
        document.deleted_by = current_user.id
        
        db.commit()
        db.refresh(document)
        
        return {
            "id": document.id,
            "filename": document.filename,
            "filepath": document.filepath,
            "file_type": document.file_type,
            "file_size": document.file_size,
            "uploaded_at": document.uploaded_at,
            "uploaded_by": document.uploaded_by,
            "is_deleted": document.is_deleted,
            "deleted_at": document.deleted_at,
            "deleted_by": document.deleted_by
        }
    except HTTPException:
        raise
    except Exception as e:
        # Log the error
        print(f"Error deleting document: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to delete document: {str(e)}"
        )

@router.get("/documents/view/{document_name}")
async def view_document(
    document_name: str,
    token: str = None,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """
    Serve a document from the encompliance-documents directory.
    
    Args:
        document_name: Name of the document to serve
        token: Optional token for authentication
        
    Returns:
        The document file
    """
    try:
        # Map document names to actual files
        document_mapping = {
            "childcare-746-centers": "chapter-746-centers.pdf",
            "general-residential-operations": "chapter-748-gro.pdf"
        }
        
        # Get the actual filename
        actual_filename = document_mapping.get(document_name)
        if not actual_filename:
            # Try to find the file directly
            storage_dir = settings.PDF_STORAGE_PATH
            for file in os.listdir(storage_dir):
                if document_name.lower() in file.lower():
                    actual_filename = file
                    break
            
            if not actual_filename:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail=f"Document {document_name} not found"
                )
        
        # Construct the full path
        file_path = os.path.join(settings.PDF_STORAGE_PATH, actual_filename)
        
        # Check if the file exists
        if not os.path.exists(file_path):
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Document file not found: {actual_filename}"
            )
        
        # Get the MIME type
        mime_type = get_file_mimetype(actual_filename)
        
        # Return the file with inline disposition (to display in browser)
        return FileResponse(
            path=file_path,
            filename=actual_filename,
            media_type=mime_type,
            content_disposition_type="inline"  # This makes it display in browser
        )
    except Exception as e:
        # Log the error
        print(f"Error serving document {document_name}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to serve document: {str(e)}"
        )

@router.get("/documents/ensure-minimum-standards")
async def ensure_minimum_standards(
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """
    Ensure the user has access to the Minimum Standards PDF.
    This endpoint is called to make sure the PDF is available for the user.
    """
    try:
        # First ensure the PDF is available in the system
        document_name = "childcare-746-centers"
        document_mapping = {
            "childcare-746-centers": "chapter-746-centers.pdf",
            "general-residential-operations": "chapter-748-gro.pdf"
        }
        
        # Get the actual filename
        actual_filename = document_mapping.get(document_name)
        if not actual_filename:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Document {document_name} mapping not found"
            )
        
        # Construct the full path
        file_path = os.path.join(settings.PDF_STORAGE_PATH, actual_filename)
        
        # Check if the file exists
        if not os.path.exists(file_path):
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Document file not found: {actual_filename}"
            )
            
        # The file exists, now ensure the user has access by creating a reference in their documents if needed
        # Check if user already has this document
        user_documents = await list_documents(db, current_user.id)
        has_document = any(doc.get("filename") == actual_filename for doc in user_documents)
        
        if not has_document:
            # Create a document reference for the user
            document = Document(
                filename=actual_filename,
                filepath=actual_filename,  # Use direct filename as filepath for system documents
                file_type="application/pdf",
                file_size=os.path.getsize(file_path),
                uploaded_by=current_user.id
            )
            db.add(document)
            db.commit()
            db.refresh(document)
            
        return {"success": True, "message": "Minimum Standards PDF is available"}
    except Exception as e:
        # Log the error
        print(f"Error ensuring Minimum Standards: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to ensure Minimum Standards: {str(e)}"
        )

@router.get("/documents/view/childcare-746-centers")
async def view_childcare_746_centers(token: str = None, current_user: User = Depends(get_current_user)):
    """View the Minimum Standards for Licensed and Registered Child-Care Homes (Chapter 746)."""
    try:
        # Map to the actual filename
        document_mapping = {
            "childcare-746-centers": "chapter-746-centers.pdf",
            "general-residential-operations": "chapter-748-gro.pdf"
        }
        
        filename = document_mapping.get("childcare-746-centers")
        if not filename:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Minimum standards PDF not found"
            )
            
        # Check if file exists
        file_path = os.path.join(settings.PDF_STORAGE_PATH, filename)
        if not os.path.exists(file_path):
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Minimum standards PDF not found"
            )
            
        # Return file response with inline content disposition
        return FileResponse(
            file_path, 
            filename=filename,
            content_disposition_type="inline"
        )
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
            
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error viewing minimum standards: {str(e)}"
        )

@router.get("/view/{document_id}", response_class=FileResponse)
async def view_document(
    document_id: str, 
    token: str = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """Endpoint to view a document"""
    try:
        # Extract useful logs for debugging
        log_identity = f"token: {token and token[:10]}..., user_id: {current_user and current_user.id}"
        logging.info(f"Document view request: id={document_id}, {log_identity}")
        
        # Handle special case for 'childcare-746-centers' 
        if document_id == "childcare-746-centers":
            # Map to the actual filename
            document_mapping = {
                "childcare-746-centers": "chapter-746-centers.pdf",
                "general-residential-operations": "chapter-748-gro.pdf"
            }
            
            filename = document_mapping.get("childcare-746-centers")
            if not filename:
                logging.error(f"PDF filename mapping not found for 'childcare-746-centers'")
                raise HTTPException(
                    status_code=404,
                    detail="Minimum standards PDF not found"
                )
                
            # Build full path
            file_path = os.path.join(settings.PDF_STORAGE_PATH, filename)
            logging.info(f"Serving minimum standards PDF: {file_path}")
            
            # Check if file exists
            if not os.path.exists(file_path):
                logging.error(f"Minimum standards PDF not found at: {file_path}")
                raise HTTPException(
                    status_code=404,
                    detail="Minimum standards PDF not found"
                )
                
            # Return the file with inline content disposition
            return FileResponse(
                file_path, 
                filename=filename,
                content_disposition_type="inline"
            )
        
        # For all other document IDs, try to convert to integer
        try:
            doc_id = int(document_id)
        except ValueError:
            logging.error(f"Invalid document_id format: {document_id}")
            raise HTTPException(
                status_code=400,
                detail="Invalid document ID format"
            )
            
        # Query the document
        document = db.query(Document).filter(Document.id == doc_id, Document.uploaded_by == current_user.id).first()
        if not document:
            logging.error(f"Document not found: {doc_id} for user {current_user.id}")
            raise HTTPException(
                status_code=404,
                detail="Document not found"
            )
            
        # Build file path - use document.filepath or document.stored_filename based on your model
        file_path = None
        if hasattr(document, 'stored_filename'):
            file_path = os.path.join(settings.PDF_STORAGE_PATH, document.stored_filename)
        elif hasattr(document, 'filepath'):
            file_path = os.path.join(settings.PDF_STORAGE_PATH, document.filepath)
        else:
            logging.error(f"Document has no filepath or stored_filename attribute: {doc_id}")
            raise HTTPException(
                status_code=500,
                detail="Internal server error - invalid document record"
            )
            
        logging.info(f"Serving document: {file_path}")
        
        # Check if file exists
        if not os.path.exists(file_path):
            logging.error(f"Document file not found at: {file_path}")
            raise HTTPException(
                status_code=404,
                detail="Document file not found"
            )
            
        # Return the file with inline content disposition
        return FileResponse(
            file_path, 
            filename=document.filename,
            content_disposition_type="inline"
        )
        
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
            
        logging.error(f"Error viewing document: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error: {str(e)}"
        )

@router.get("/download/{document_id}", response_class=FileResponse)
async def download_document(
    document_id: int, 
    token: str = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """Endpoint to download a document"""
    try:
        # Extract useful logs for debugging
        log_identity = f"token: {token and token[:10]}..., user_id: {current_user and current_user.id}"
        logging.info(f"Document download request: id={document_id}, {log_identity}")
        
        # Query the document
        document = db.query(Document).filter(Document.id == document_id, Document.uploaded_by == current_user.id).first()
        if not document:
            logging.error(f"Document not found: {document_id} for user {current_user.id}")
            raise HTTPException(
                status_code=404,
                detail="Document not found"
            )
            
        # Build file path    
        file_path = os.path.join(settings.DOCUMENT_STORAGE_PATH, document.stored_filename)
        logging.info(f"Serving document for download: {file_path}")
        
        # Check if file exists
        if not os.path.exists(file_path):
            logging.error(f"Document file not found at: {file_path}")
            raise HTTPException(
                status_code=404,
                detail="Document file not found"
            )
            
        # Return the file with attachment content disposition for download
        return FileResponse(
            file_path, 
            filename=document.filename,
            content_disposition_type="attachment"
        )
        
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
            
        logging.error(f"Error downloading document: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error: {str(e)}"
        ) 